---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: check-embargoed-cves-task
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: |
      Checks if any passed CVEs are embargoed.
      The task will always exit 0 even if something fails. This is because the task result will not be
      set if the task fails, and the task result should always be set and propagated back to the cluster
      that creates the internal request. The success/failure is handled in the task creating the internal
      request.
  params:
    - name: cves
      type: string
      description: |
          String containing a space separated list of CVEs to check (e.g. 'CVE-123 CVE-234 CVE-345')
  results:
    - name: result
      description: Success if the task succeeds, the error otherwise
    - name: embargoed_cves
      description: Space separated string of embargoed CVEs if any are found, empty string otherwise
  steps:
    - name: check-embargoed-cves
      image: quay.io/konflux-ci/release-service-utils:38c3bfd7479c86b832cba5b61f9bbde40c469393
      env:
        - name: SERVICE_ACCOUNT_NAME
          valueFrom:
            secretKeyRef:
              name: osidb-service-account
              key: name
        - name: SERVICE_ACCOUNT_KEYTAB
          valueFrom:
            secretKeyRef:
              name: osidb-service-account
              key: base64_keytab
        - name: OSIDB_URL
          valueFrom:
            secretKeyRef:
              name: osidb-service-account
              key: osidb_url
      script: |
          #!/usr/bin/env sh
          set -eo pipefail

          exitfunc() {
              local err=$1
              local line=$2
              local command="$3"
              if [ $err -eq 0 ] ; then
                  echo -n "Success" > $(results.result.path)
              else
                  echo -n "$0: ERROR '$command' failed at line $line - exited with status $err" > $(results.result.path)
              fi
              exit 0 # exit the script cleanly as there is no point in proceeding past an error or exit call
          }
          # due to set -e, this catches all EXIT and ERR calls and the task should never fail with nonzero exit code
          trap 'exitfunc $? $LINENO "$BASH_COMMAND"' EXIT

          echo -n "" > $(results.embargoed_cves.path)

          # write keytab to file
          echo -n ${SERVICE_ACCOUNT_KEYTAB} | base64 --decode > /tmp/keytab
          # workaround kinit: Invalid UID in persistent keyring name while getting default ccache
          export KRB5CCNAME=`mktemp`
          export KRB5_CONFIG=$(mktemp)
          sed '/\[libdefaults\]/a\    dns_canonicalize_hostname = false' /etc/krb5.conf > "${KRB5_CONFIG}"
          kinit ${SERVICE_ACCOUNT_NAME} -k -t /tmp/keytab

          RC=0
          for CVE in $(params.cves); do
              echo "Checking CVE ${CVE}"
              # Get token. They are short lived, so get one for before each request
              TOKEN=$(curl --retry 3 --negotiate -u : ${OSIDB_URL}/auth/token | jq -r '.access')
              EMBARGOED=$(curl --retry 3 -H 'Content-Type: application/json' -H "Authorization: Bearer ${TOKEN}" \
                  "${OSIDB_URL}/osidb/api/v1/flaws?cve_id=${CVE}&include_fields=cve_id,embargoed" \
                  | jq .results[0].embargoed)
              # null would mean no access to the CVE, which may mean embargoed, and true means embargoed
              if [ $EMBARGOED != "false" ] ; then
                  echo "CVE ${CVE} is embargoed"
                  echo -n "${CVE} " >> $(results.embargoed_cves.path)
                  RC=1
              fi
          done
          exit $RC
